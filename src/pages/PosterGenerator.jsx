import { useState, useRef } from 'react'
import './PosterGenerator.css'

function PosterGenerator() {
  const [selectedTemplate, setSelectedTemplate] = useState('protest')
  const [posterData, setPosterData] = useState({
    title: 'Justice for Palestine',
    subtitle: 'Stand Together for Human Rights',
    date: '',
    time: '',
    location: '',
    description: 'Join us in solidarity for justice and peace.',
    customText: ''
  })
  const [generatedPoster, setGeneratedPoster] = useState(null)
  const [isGenerating, setIsGenerating] = useState(false)
  const canvasRef = useRef(null)

  const templates = [
    {
      id: 'protest',
      name: 'Protest March',
      preview: '🚶‍♂️',
      colors: ['#000000', '#009736', '#ffffff']
    },
    {
      id: 'rally',
      name: 'Rally',
      preview: '📢',
      colors: ['#ce1126', '#ffffff', '#000000']
    },
    {
      id: 'solidarity',
      name: 'Solidarity (AI Generated)',
      preview: '🤝',
      colors: ['#009736', '#ffffff', '#000000']
    },
    {
      id: 'awareness',
      name: 'Awareness',
      preview: '💡',
      colors: ['#000000', '#009736', '#ffffff']
    }
  ]

  const handleInputChange = (field, value) => {
    setPosterData(prev => ({
      ...prev,
      [field]: value
    }))
  }

  const generatePoster = () => {
    // If solidarity template is selected, use AI generation
    if (selectedTemplate === 'solidarity') {
      generateAIPoster()
      return
    }

    const canvas = canvasRef.current
    const ctx = canvas.getContext('2d')
    
    // Set canvas size
    canvas.width = 800
    canvas.height = 1000
    
    const template = templates.find(t => t.id === selectedTemplate)
    
    // Clear canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    
    // Background gradient
    const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height)
    gradient.addColorStop(0, template.colors[0])
    gradient.addColorStop(0.5, template.colors[1])
    gradient.addColorStop(1, template.colors[2])
    ctx.fillStyle = gradient
    ctx.fillRect(0, 0, canvas.width, canvas.height)
    
    // Palestine flag element
    const flagWidth = 120
    const flagHeight = 80
    const flagX = (canvas.width - flagWidth) / 2
    const flagY = 50
    
    // Flag stripes
    ctx.fillStyle = '#000000'
    ctx.fillRect(flagX, flagY, flagWidth, flagHeight / 3)
    ctx.fillStyle = '#ffffff'
    ctx.fillRect(flagX, flagY + flagHeight / 3, flagWidth, flagHeight / 3)
    ctx.fillStyle = '#009736'
    ctx.fillRect(flagX, flagY + 2 * flagHeight / 3, flagWidth, flagHeight / 3)
    
    // Flag triangle
    ctx.fillStyle = '#ce1126'
    ctx.beginPath()
    ctx.moveTo(flagX, flagY)
    ctx.lineTo(flagX, flagY + flagHeight)
    ctx.lineTo(flagX + flagWidth * 0.4, flagY + flagHeight / 2)
    ctx.closePath()
    ctx.fill()
    
    // Title
    ctx.fillStyle = '#ffffff'
    ctx.font = 'bold 48px Arial'
    ctx.textAlign = 'center'
    ctx.fillText(posterData.title, canvas.width / 2, flagY + flagHeight + 80)
    
    // Subtitle
    ctx.fillStyle = '#ffffff'
    ctx.font = '32px Arial'
    ctx.fillText(posterData.subtitle, canvas.width / 2, flagY + flagHeight + 120)
    
    // Date and Time
    if (posterData.date || posterData.time) {
      ctx.fillStyle = '#ffffff'
      ctx.font = '28px Arial'
      let dateTimeText = ''
      if (posterData.date) dateTimeText += posterData.date
      if (posterData.date && posterData.time) dateTimeText += ' at '
      if (posterData.time) dateTimeText += posterData.time
      ctx.fillText(dateTimeText, canvas.width / 2, flagY + flagHeight + 180)
    }
    
    // Location
    if (posterData.location) {
      ctx.fillStyle = '#ffffff'
      ctx.font = '28px Arial'
      ctx.fillText(`📍 ${posterData.location}`, canvas.width / 2, flagY + flagHeight + 220)
    }
    
    // Description
    if (posterData.description) {
      ctx.fillStyle = '#ffffff'
      ctx.font = '20px Arial'
      const words = posterData.description.split(' ')
      let line = ''
      let y = flagY + flagHeight + 280
      
      for (let word of words) {
        const testLine = line + word + ' '
        const metrics = ctx.measureText(testLine)
        if (metrics.width > canvas.width - 100) {
          ctx.fillText(line, canvas.width / 2, y)
          line = word + ' '
          y += 30
        } else {
          line = testLine
        }
      }
      ctx.fillText(line, canvas.width / 2, y)
    }
    
    // Custom text
    if (posterData.customText) {
      ctx.fillStyle = '#ffffff'
      ctx.font = '24px Arial'
      ctx.fillText(posterData.customText, canvas.width / 2, canvas.height - 100)
    }
    
    // Footer
    ctx.fillStyle = '#ffffff'
    ctx.font = '18px Arial'
    ctx.fillText('Generated by United Ummah', canvas.width / 2, canvas.height - 50)
    
    // Convert to image
    const posterImage = canvas.toDataURL('image/png')
    setGeneratedPoster(posterImage)
  }

  const downloadPoster = () => {
    if (generatedPoster) {
      const link = document.createElement('a')
      link.download = 'protest-poster.png'
      link.href = generatedPoster
      link.click()
    }
  }

  const resetPoster = () => {
    setPosterData({
      title: 'Justice for Palestine',
      subtitle: 'Stand Together for Human Rights',
      date: '',
      time: '',
      location: '',
      description: 'Join us in solidarity for justice and peace.',
      customText: ''
    })
    setGeneratedPoster(null)
    setIsGenerating(false)
  }
  const generateAIPoster = async () => {
    setIsGenerating(true)
    try {
      // Create a dynamic prompt based on user input
      let prompt = "Create a clean, bold solidarity poster. Use the Palestinian flag colors (red, green, black, white) prominently. Include one strong symbol such as a raised fist or hands joined in solidarity. "
      
      if (posterData.title) {
        prompt += `Add large, clear, bold text saying "${posterData.title}" in capital letters. `
      }
      
      if (posterData.subtitle) {
        prompt += `Include subtitle text: "${posterData.subtitle}". `
      }
      
      if (posterData.date || posterData.time) {
        let dateTimeText = ''
        if (posterData.date) dateTimeText += posterData.date
        if (posterData.date && posterData.time) dateTimeText += ' at '
        if (posterData.time) dateTimeText += posterData.time
        prompt += `Include date/time: "${dateTimeText}". `
      }
      
      if (posterData.location) {
        prompt += `Include location: "${posterData.location}". `
      }
      
      if (posterData.description) {
        prompt += `Include description: "${posterData.description}". `
      }
      
      if (posterData.customText) {
        prompt += `Include custom text: "${posterData.customText}". `
      }
      
      prompt += "Make it a professional, impactful poster design suitable for social media sharing."

      const response = await fetch(
        "https://api-inference.huggingface.co/models/stabilityai/stable-diffusion-xl-base-1.0",
        {
          method: "POST",
          headers: {
            Authorization: "***REMOVED***",
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            inputs: prompt,
            parameters: {
              width: 1024,
              height: 1024,
              num_inference_steps: 30,
              guidance_scale: 8,
            },
          }),
        }
      );

      if (!response.ok) {
        throw new Error(`Error: ${response.statusText}`);
      }

      const blob = await response.blob();
      const posterImage = URL.createObjectURL(blob);
      setGeneratedPoster(posterImage);
    } catch (error) {
      console.error("Failed to create AI poster:", error);
    } finally {
      setIsGenerating(false);
    }
  };


  return (
    <div className="poster-generator">
      <div className="page-header">
        <h1>Poster Generator</h1>
        <p>Create powerful protest posters for your events and demonstrations</p>
      </div>

      <div className="generator-container">
        <div className="editor-section">
          <h2>Design Your Poster</h2>
          
          <div className="template-selection">
            <h3>Choose Template</h3>
            <div className="template-grid">
              {templates.map(template => (
                <div
                  key={template.id}
                  className={`template-option ${selectedTemplate === template.id ? 'selected' : ''}`}
                  onClick={() => setSelectedTemplate(template.id)}
                >
                  <div className="template-preview">{template.preview}</div>
                  <span>{template.name}</span>
                </div>
              ))}
            </div>
            {selectedTemplate === 'solidarity' && (
              <div className="ai-notice">
                <p>🤖 This template uses AI generation for unique, creative designs!</p>
              </div>
            )}
          </div>

          <div className="poster-form">
            <div className="form-group">
              <label htmlFor="title">Main Title</label>
              <input
                type="text"
                id="title"
                value={posterData.title}
                onChange={(e) => handleInputChange('title', e.target.value)}
                placeholder="Enter main title"
              />
            </div>

            <div className="form-group">
              <label htmlFor="subtitle">Subtitle</label>
              <input
                type="text"
                id="subtitle"
                value={posterData.subtitle}
                onChange={(e) => handleInputChange('subtitle', e.target.value)}
                placeholder="Enter subtitle"
              />
            </div>

            <div className="form-row">
              <div className="form-group">
                <label htmlFor="date">Date</label>
                <input
                  type="date"
                  id="date"
                  value={posterData.date}
                  onChange={(e) => handleInputChange('date', e.target.value)}
                />
              </div>

              <div className="form-group">
                <label htmlFor="time">Time</label>
                <input
                  type="time"
                  id="time"
                  value={posterData.time}
                  onChange={(e) => handleInputChange('time', e.target.value)}
                />
              </div>
            </div>

            <div className="form-group">
              <label htmlFor="location">Location</label>
              <input
                type="text"
                id="location"
                value={posterData.location}
                onChange={(e) => handleInputChange('location', e.target.value)}
                placeholder="Enter event location"
              />
            </div>

            <div className="form-group">
              <label htmlFor="description">Description</label>
              <textarea
                id="description"
                value={posterData.description}
                onChange={(e) => handleInputChange('description', e.target.value)}
                placeholder="Enter event description"
                rows="3"
              />
            </div>

            <div className="form-group">
              <label htmlFor="customText">Custom Text</label>
              <input
                type="text"
                id="customText"
                value={posterData.customText}
                onChange={(e) => handleInputChange('customText', e.target.value)}
                placeholder="Additional text (optional)"
              />
            </div>

            <div className="form-actions">
              <button 
                className="btn btn-primary" 
                onClick={generatePoster}
                disabled={isGenerating}
              >
                {isGenerating ? 'Generating...' : 'Generate Poster'}
              </button>
              <button className="btn btn-secondary" onClick={resetPoster}>
                Reset
              </button>
            </div>
          </div>
        </div>

        <div className="preview-section">
          <h2>Poster Preview</h2>
          
          {isGenerating ? (
            <div className="poster-placeholder">
              <div className="placeholder-content">
                <div className="placeholder-icon">🤖</div>
                <p>AI is generating your poster...</p>
                <p>This may take a few moments</p>
              </div>
            </div>
          ) : generatedPoster ? (
            <div className="poster-preview">
              <img src={generatedPoster} alt="Generated poster" />
              <div className="poster-actions">
                <button className="btn btn-primary" onClick={downloadPoster}>
                  Download Poster
                </button>
              </div>
            </div>
          ) : (
            <div className="poster-placeholder">
              <div className="placeholder-content">
                <div className="placeholder-icon">🎨</div>
                <p>Your poster will appear here</p>
                <p>Fill out the form and click "Generate Poster"</p>
              </div>
            </div>
          )}
        </div>
      </div>

      <div className="tips-section">
        <h2>Design Tips</h2>
        <div className="tips-grid">
          <div className="tip-card">
            <h3>📝 Keep it Simple</h3>
            <p>Use clear, readable text and avoid cluttering the design</p>
          </div>
          <div className="tip-card">
            <h3>🎨 Use Contrast</h3>
            <p>Ensure text is clearly visible against the background</p>
          </div>
          <div className="tip-card">
            <h3>📱 Think Mobile</h3>
            <p>Designs should work well when shared on social media</p>
          </div>
          <div className="tip-card">
            <h3>🔍 Include Essentials</h3>
            <p>Always include date, time, location, and purpose</p>
          </div>
        </div>
      </div>

      <canvas ref={canvasRef} style={{ display: 'none' }} />
    </div>
  )
}

export default PosterGenerator 